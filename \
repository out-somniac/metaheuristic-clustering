use super::solution::Fuzzy;
use crate::Data;
use ndarray::{Array1, Array2, ArrayBase, Axis, OwnedRepr};
use ndarray_rand::rand_distr::Uniform;
use std::error::Error;

pub struct WOAParameters {
    pub n_classes: usize,
    pub agents_total: usize,
    pub max_iterations: usize,
}

fn agents_fitness(agents: &Vec<Fuzzy>, data: &Data) -> Vec<f64> {
    agents
        .iter()
        .map(|agent| agent.fitness(&data))
        .collect::<Vec<_>>()
}

pub fn fit(data: &Data, params: WOAParameters) -> Result<Fuzzy, Box<dyn Error>> {
    let n_samples = data.records.nrows();

    let mut agents: Vec<Fuzzy> = (0..params.agents_total)
        .map(|_| Fuzzy::random(n_samples, params.n_classes))
        .collect();

    for time in 1..=params.max_iterations {
        let a = 2.0 * params.max_iterations as f64 / time as f64;
        let r_1 = Array2::random((n_samples, params.n_classes), Uniform::new(0.0, 1.0));
        // let fitness = agents_fitness(&agents, &data);
    }

    todo!("I was lazy");
}
